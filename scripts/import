#!/bin/bash

# EDIT THESE
###########################################################################
GOOGLE_SHARE_NAME=__Manuscript\ Pages
# GOOGLE_SHARE_NAME=BnF\ Ms\ Fr\ 640/__Manuscript\ Pages
RCLONE_SOURCE_NAME=google

DST_FOLIO="../nginx/webroot/folio"
DST_UNKNOWN="../nginx/webroot/unknown"

# FIXME: Assumes it's either set up on DO instance or running locally on OSX
case $HOSTNAME in
  (makingandknowing-asset) RCLONE_CONFIG_FILE="/root/.config/rclone/rclone.conf";;
  (*) RCLONE_CONFIG_FILE="/Users/$USER/.config/rclone/rclone.conf";;
esac

# DO NOT EDIT BELOW THIS LINE
###########################################################################

# Uncomment to step
##set -x
##trap read debug

# Determine RUNDIR, sensitive to softlinks
# From: https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  RUNDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$RUNDIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
export RUNDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# FIXME: Appending RUNDIR Necessary for cron run, but should make more flexible
DST_FOLIO="$RUNDIR/$DST_FOLIO"
DST_UNKNOWN="$RUNDIR/$DST_UNKNOWN"

# Set up environment and temp dirs for processing
printf "\n================================================================\n"
printf "$(date +"%m.%d.%Y @ %H:%M") : BEGIN \n"
printf "================================================================\n"

# 1a.) BATCH MODE
if [ -z "$1" ]; then
	BATCHMODE=true
	printf "BATCH operation: Synchronizing with Google\n"
	printf "================================================================\n\n"
	INFOLDER="$RUNDIR/content_import/TEMP/input"
	mkdir -p "$INFOLDER"
	rclone --drive-formats txt --config="$RCLONE_CONFIG_FILE" -v --drive-shared-with-me sync "$RCLONE_SOURCE_NAME":"$GOOGLE_SHARE_NAME" "$INFOLDER"

# 1b.) SINGLE FILE
else
	INFILE="$1"
	if [ ! -f "$INFILE" ]; then
   		echo "ERROR: '$INFILE' does not exist."
		exit 1
	fi
	BATCHMODE=false
	printf "$INFILE\n"
	printf "================================================================\n\n"

fi

# Set up working folder
OUTFOLDER="$RUNDIR/content_import/TEMP/output"
mkdir -p "$OUTFOLDER"

# Operate on entire directory
if [ "$BATCHMODE" = true ] ; then

	# 2.) Extract the XML from out of the word documents in the folder
	printf "$(date +"%m.%d.%Y @ %H:%M") : (TXT -> XML)\n"
	find "$INFOLDER" -name *.txt -type f -exec "$RUNDIR/content_import/_copy.sh" "$OUTFOLDER" {} "$DST_FOLIO"  "$DST_UNKNOWN" \;
	# touch the extract script to indicate last time it was run
	touch "$RUNDIR/content_import/_copy.sh"

	# 3.) Convert the extracted files to our format
	printf "\n$(date +"%m.%d.%Y @ %H:%M") : (XML -> HTML)\n"
	find "$OUTFOLDER" -name *.xml -type f -exec "$RUNDIR/content_import/_convert.sh" {} \;
	# touch the convert script to indicate last time it was run
	touch "$RUNDIR/content_import/_convert.sh"

	# 4.) Organize everything into .../folio/FOLIO_ID/[tc|tcn|tl]
	printf "\n$(date +"%m.%d.%Y @ %H:%M") : Sorting files...\n"
	find "$RUNDIR/content_import/TEMP/output" -name *.html -type f -exec "$RUNDIR/content_import/_sort.sh" "$DST_FOLIO" "$DST_UNKNOWN" {} \;

	# 5.) Create /folio/manifest.json
	printf "\n$(date +"%m.%d.%Y @ %H:%M") : Creating manifest...\n"
	"$RUNDIR/content_import/_generateManifest.sh" "$DST_FOLIO" "$DST_FOLIO/manifest.json"

# Operate on single file
else

	# 2.) Extract the XML from out of the word document
	printf "$(date +"%m.%d.%Y @ %H:%M") : (TXT -> XML)\n"
	"$RUNDIR/content_import/_copy.sh" "$OUTFOLDER" "$INFILE"

	# 3.) Convert the extracted files to our format
	INFILE="$OUTFOLDER/$(basename "$(dirname "$INFILE")")/$(basename "$INFILE").xml"
	printf "\n$(date +"%m.%d.%Y @ %H:%M") : (XML -> HTML)\n"
	"$RUNDIR/content_import/_convert.sh" "$INFILE"

	# 4.) Organize everything into .../folio/FOLIO_ID/[tc|tcn|tl]
	INFILE="$(echo $INFILE)_converted.html"
	printf "\n$(date +"%m.%d.%Y @ %H:%M") : Sorting files...\n"
	"$RUNDIR/content_import/_sort.sh" "$DST_FOLIO" "$DST_UNKNOWN" "$INFILE"
fi

printf "\n================================================================\n"
printf "$(date +"%m.%d.%Y @ %H:%M") : END \n"
printf "================================================================\n"
